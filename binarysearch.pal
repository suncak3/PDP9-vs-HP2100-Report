/ Binary Search Program for HP2100 Assembler
/ Implements binary search on a sorted array of integers

/ Input: 
/   - Sorted array stored in memory
/   - Key to search for
/ Output: 
/   - Index of the key if found
/   - -1 if not found

/ Memory Layout:
ARRAY:  10, 15, 20, 25, 30, 35, 40, 45, 50, 55  / Example sorted array
N:      10                                      / Array size
KEY:    25                                      / Search key
RESULT: 0                                       / Search result (index or -1)

        ORG 100                                 / Start program at memory location 100
START:  CLA                                     / Clear accumulator
        LDA N                                   / Load array size (N)
        STA R                                   / R = High index (right boundary)
        CLA
        STA L                                   / L = Low index (left boundary) = 0

LOOP:   CLA
        ADD L                                   / MID = (L + R) / 2
        ADD R
        ASR                                     / Divide by 2
        STA MID

        LDA MID                                 / Compute address: ARRAY[MID]
        ADD ARRAY                               / Add base address
        STA TMP                                 / Store in TMP for indirect reference
        CLA
        LDA TMP I                               / Load ARRAY[MID] (indirect addressing)

        CPA KEY                                 / Compare ARRAY[MID] with KEY
        SZA
        JMP FOUND                               / If equal, jump to FOUND

        CPA KEY                                 / Check if ARRAY[MID] > KEY
        SZA CLA
        JMP LESS                                / If less, search left part
        LDA MID
        ADD ONE                                 / Update L = MID + 1
        STA L
        JMP CHECK

LESS:   LDA MID
        SUB ONE                                 / Update R = MID - 1
        STA R

CHECK:  CLA
        CPA R
        SLE
        JMP NOT_FOUND                           / If L > R, KEY not found
        JMP LOOP

FOUND:  LDA MID                                 / Store result (MID) in RESULT
        STA RESULT
        HLT                                     / Halt program

NOT_FOUND:
        CLA
        CMA                                     / RESULT = -1 (complement of 0)
        STA RESULT
        HLT                                     / Halt program

/ Constants
ONE:    1
TMP:    0
L:      0
R:      0
MID:    0

        END START
